// Generated by CoffeeScript 1.4.0
(function() {
  var child, watch,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  watch = require('watch');

  child = require('child_process');

  module.exports = function(path, fullCommand) {
    var Observer, args, command;
    args = fullCommand.split(' ');
    command = args.shift();
    Observer = (function() {

      function Observer() {
        this.onChange = __bind(this.onChange, this);

      }

      Observer.prototype.start = function() {
        return watch.watchTree(path, this.onChange);
      };

      Observer.prototype.onChange = function(files) {
        files = this.parseFiles(files);
        this.log("\nChange detected to:\n" + files);
        return this.runCommand();
      };

      Observer.prototype.parseFiles = function(files) {
        if (String === files.constructor) {
          files = [files];
        } else {
          files = Object.keys(files);
        }
        files = files.map(function(file) {
          return file.replace(path, '') || '/';
        });
        files = files.join("\n- ");
        return "- " + files;
      };

      Observer.prototype.log = function(message) {
        return console.log(message);
      };

      Observer.prototype.runCommand = function() {
        this.log("\nRunning `" + fullCommand + "`...");
        return child.spawn(command, args, {
          stdio: 'inherit'
        });
      };

      return Observer;

    })();
    return new Observer();
  };

}).call(this);
