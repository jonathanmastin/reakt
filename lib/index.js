// Generated by CoffeeScript 1.4.0
(function() {
  var child, observer, watch,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  watch = require('watch');

  child = require('child_process');

  module.exports = observer = function(path, command) {
    var Observer;
    Observer = (function() {

      function Observer() {
        this.onChange = __bind(this.onChange, this);

      }

      Observer.prototype.observe = function() {
        return watch.watchTree(path, this.onChange);
      };

      Observer.prototype.parseFiles = function(files) {
        if (String !== files.constructor) {
          files = "- " + Object.keys(files).join("\n- ");
        }
        return files;
      };

      Observer.prototype.onChange = function(files) {
        files = this.parseFiles(files);
        console.log("Change detected to:\n- " + files);
        return this.runCommand();
      };

      Observer.prototype.runCommand = function() {
        var args, cmd;
        console.log("Running " + command);
        args = command.split(' ');
        cmd = args.shift();
        return child.spawn(cmd, args, {
          stdio: 'inherit'
        });
      };

      return Observer;

    })();
    return new Observer();
  };

}).call(this);
