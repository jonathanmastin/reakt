// Generated by CoffeeScript 1.4.0
(function() {
  var LINE_PREFIX, childProcess, watch,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  watch = require('watch');

  childProcess = require('child_process');

  LINE_PREFIX = "---";

  module.exports = function(path, command, options) {
    var Observer, args, child, exclude, excludePattern, include, includePattern, longRunning;
    if (options == null) {
      options = {};
    }
    longRunning = options.longRunning, exclude = options.exclude, include = options.include;
    excludePattern = exclude ? RegExp(exclude) : null;
    includePattern = include ? RegExp(include) : null;
    args = [command];
    args.unshift('-c');
    child = null;
    Observer = (function() {

      function Observer() {
        this.onChange = __bind(this.onChange, this);

      }

      Observer.prototype.start = function() {
        this.log("");
        this.log("Observing files in `" + path + "` and running `" + command + "` on changes");
        this.log("");
        if (include != null) {
          this.log("Include files matching: /" + include + "/");
        }
        if (exclude != null) {
          this.log("Exclude files matching: /" + exclude + "/");
        }
        return watch.watchTree(path, this.onChange);
      };

      Observer.prototype.onChange = function(files) {
        var file, _i, _len;
        files = this.parseFiles(files);
        if (files.length) {
          this.log("");
          this.log("Change detected:");
          for (_i = 0, _len = files.length; _i < _len; _i++) {
            file = files[_i];
            this.log("." + file);
          }
          this.log("");
          return this.runCommand();
        }
      };

      Observer.prototype.parseFiles = function(files) {
        if (String === files.constructor) {
          files = [files];
        } else {
          files = Object.keys(files);
        }
        files = files.map(function(file) {
          return file.replace(path, '') || '/';
        });
        files = files.map(function(file) {
          if (includePattern.test(file)) {
            return file;
          } else {
            return null;
          }
        });
        files = files.map(function(file) {
          if (excludePattern.test(file)) {
            return null;
          } else {
            return file;
          }
        });
        return files = files.reduce((function(files, file) {
          if (file != null) {
            files.push(file);
          }
          return files;
        }), []);
      };

      Observer.prototype.log = function(message) {
        return console.log("" + LINE_PREFIX + " " + message);
      };

      Observer.prototype.runCommand = function() {
        var _this = this;
        if ((child != null) && longRunning) {
          this.log("Killing process with PID " + child.pid);
          child.kill();
        }
        this.log("Running `" + command + "`");
        this.log("");
        child = childProcess.spawn("sh", args, {
          stdio: 'inherit'
        });
        return child.on('exit', function(code) {
          if (code == null) {
            code = 0;
          }
          if (longRunning) {
            _this.log("PID " + (child != null ? child.pid : void 0) + " exited with " + code);
          }
          _this.log("");
          return child = null;
        });
      };

      return Observer;

    })();
    return new Observer();
  };

}).call(this);
