// Generated by CoffeeScript 1.4.0
(function() {
  var child, equal, expect, observe, spy, watch, _ref;

  _ref = require('assert'), expect = _ref.ok, equal = _ref.equal;

  child = require('child_process');

  watch = require('watch');

  spy = require('bondjs');

  observe = require('./');

  describe('observe', function() {
    beforeEach(function() {
      this.subject = observe("/foo/bar", 'ls ..');
      return spy(this.subject, 'log')["return"]();
    });
    describe('start', function() {
      return it('sets a watcher on the provided path', function() {
        var cb, path, _ref1;
        spy(watch, 'watchTree')["return"]();
        this.subject.start();
        _ref1 = watch.watchTree.calledArgs[0], path = _ref1[0], cb = _ref1[1];
        equal(path, "/foo/bar");
        return equal(cb, this.subject.onChange);
      });
    });
    describe('parseFiles', function() {
      context('when called with an object', function() {
        return it('converts the objects keys to a string and returns it', function() {
          var result;
          result = this.subject.parseFiles({
            'foo': 'foo',
            'bar': 'bar'
          });
          return equal(result, "- foo\n- bar");
        });
      });
      return context('when called with a string', function() {
        return it('returns the original string', function() {
          var result;
          result = this.subject.parseFiles('foo');
          return equal(result, '- foo');
        });
      });
    });
    describe('onChange', function() {
      return it('foos', function() {
        spy(this.subject, 'runCommand')["return"]();
        this.subject.onChange("/filename");
        return expect(this.subject.runCommand.called);
      });
    });
    return describe('runCommand', function() {
      return it('spawns a child process', function() {
        var args, cmd, opts, _ref1;
        spy(child, 'spawn')["return"]();
        this.subject.runCommand();
        _ref1 = child.spawn.calledArgs[0], cmd = _ref1[0], args = _ref1[1], opts = _ref1[2];
        equal(cmd, 'sh');
        equal(args[0], '-c');
        equal(args[1], 'ls ..');
        return equal(opts.stdio, 'inherit');
      });
    });
  });

}).call(this);
